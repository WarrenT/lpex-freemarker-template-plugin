<!--
 * =====================================================================
 *   This Ant script must run in the same JRE of the workspace,
 *   to make the "eclipse.refreshLocal" tag work properly.
 *
 *   Creating the Update site
 *   ========================
 *
 *   1. Open "build.properties" of project "com.freemarker.lpex.updatesite".
 *   2. Increment version number of property "build.version".
 *   3. Validate path to "MSBuild.exe" at property "net.msbuild.path".
 *   4. Execute target "build".
 *   5. Create plug-in: Right-click 'site.xml', select 'PDE Tools -> Build Site'.
 *   6. Execute target "createSourceForgeFiles".
 *   7. Check-in source code.
 *   8. Create version tag.
 *
 *   The result of the build process is placed into folder "upload" of
 *   project "com.freemarker.lpex.updatesite".
 * ===================================================================== -->
<project name="de.tools400.rdp.rpgunit.updatesite" default="build" basedir=".">

	<!-- Include Ant Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Load project names and new version number -->
	<property file="build.properties" />

	<!-- Load ftp user name and password -->
	<property file="ftp.properties" />

	<!-- Set date and time -->
	<tstamp>
		<format property="today.timestamp" pattern="dd.MM.yyyy - kk:mm:ss" locale="de,DE" />
		<format property="today.date.eur" pattern="dd.MM.yyyy" locale="de,DE" />
		<format property="today.date.iso" pattern="yyyy-MM-dd" locale="de,DE" />
		<format property="today.year" pattern="yyyy" locale="de,DE" />
	</tstamp>
	 
	<property name="workspace.home"   location="./../.."/>
	<property name="project.dir"      location="./.."/>
	<property name="project.name"     value="freemarker"/>

	<property name="site.root"        location="./.."          />
	<property name="build.upload.dir" location="./../upload"   />
	<property name="site.features"    location="./../features" />
	<property name="site.plugins"     location="./../plugins"  />

	<property name="temp.dir.root"             location="${basedir}/temp" />
	<property name="temp.dir.local_updatesite" location="${temp.dir.root}/local_updatesite" />
	
	<property name="examples.root" location="${workspace.home}/com.freemarker.lpex/examples" />
	
	<property name="templatebuilder.root" location="${workspace.home}/${build.templatebuilder.project}/TemplateBuilder" />
	<property name="templatebuilder.obj"  location="${templatebuilder.root}/TemplateBuilder/obj" />
	<property name="templatebuilder.bin.release" location="${templatebuilder.root}/TemplateBuilder/bin/Release" />
	<property name="templatebuilder.bin.debug"   location="${templatebuilder.root}/TemplateBuilder/bin/Debug" />
	<property name="templatebuilder.properties"  location="${templatebuilder.root}/TemplateBuilder/Properties" />
	
	<!-- Produce C# version number -->
	<propertyregex property="net.build.version" input="${build.version}" regexp="(r|b[0-9]+)" replace="0" global="true" />
	
	<!-- Check for BETA or RELEASE version -->
	<property name="release.flag.regex" value="^(?:[1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{3}|(r)))?)$" />
	<propertyregex property="release.flag" input="${build.version}" regexp="${release.flag.regex}" select="\1" casesensitive="true" />
	<if>
		<equals arg1="${release.flag}" arg2="r" />
		<then>
			<echo>Building a RELEASE version.</echo>
			<property name="is.beta.version" value="false" />
			<property name="beta.dir" value="." />
			<property name="version.info" value="&lt;div class=&quot;release&quot;&gt;Release Version - ${build.version}&lt;/div&gt;" />
		</then>
		<else>
			<echo>Building a BETA version.</echo>
			<property name="is.beta.version" value="true" />
			<property name="beta.dir" value="${sf.ftp.beta.dir.name}" />
			<property name="version.info" value="&lt;div class=&quot;beta&quot;&gt;Beta Version - ${build.version}&lt;/div&gt;" />
		</else>
	</if>

	<property name="url.updatesite" value="http://www.tools400.de/${project.name}/update/rdp8.0/downloads" />
	
	<property name="build.upload.dir.files"         location="${build.upload.dir}/sf-files/${beta.dir}" />
	<property name="build.upload.dir.files.eclipse" location="${build.upload.dir}/sf-files/${beta.dir}/eclipse" />

	<!-- Set regular expressions and replacement values -->
	<property name="validate.version.regex" value="^([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{3}|r))?)$" />
	
	<property name="manifest.version.regex" value="(Bundle-Version:\s)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)" />
	<property name="manifest.version.replace" value="\1${build.version}" />

	<property name="feature.1.version.regex" value="(&lt;feature.*version=&quot;)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;\s+provider-name.*?&gt;)" />
	<property name="feature.1.version.replace" value="\1${build.version}\3" />

	<property name="feature.2.version.regex" value="(&lt;import feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;\s+match.*?&gt;)" />
	<property name="feature.2.version.replace" value="\1${build.version}\3" />

	<property name="site.1.version.regex" value="(&lt;feature.*_)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(\.jar)" />
	<property name="site.1.version.replace" value="\1${build.version}\3" />

	<property name="site.2.version.regex" value="(&lt;feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;)" />
	<property name="site.2.version.replace" value="\1${build.version}\3" />

	<property name="net.version.regex" value="((AssemblyVersion|AssemblyFileVersion)\(&quot;)([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)(&quot;\))" />
	<property name="net.version.replace" value="\1${net.build.version}\4" />
	
	<property name="local.zipfile" value="LPEX_FreeMarker_Plugin_v${build.version}.zip" />
	
	<!-- =============================================================
	      Erstellt eine neue Update-Site.
	      Alle alten Dateien werden überschrieben, bzw. gelöscht.
	     ============================================================= -->
	<target name="build" depends="clean, updateVersionNumber" description="Step 1">
		
			<echo>+------------------------------------------------------+</echo>
			<echo>|  Finished RPGUnit build ${build.version}             |</echo>
			<echo>|                                                      |</echo>
			<echo>|  Right-click 'site.xml' and select 'PDE Tools' ->    |</echo>
			<echo>|  'Build Site' to build the update site.              |</echo>
			<echo>|                                                      |</echo>
			<echo>|  Then proceed with:   createSourceForgeFiles         |</echo>
			<echo>|                      -uploadSourceForgeFiles-        |</echo>
			<echo>+------------------------------------------------------+</echo>
			<echo>*** Finished ***</echo>
		
	</target>
	
	<!-- =============================================================
	      Kopiert alle erforderlichen Assets-Dateien.
	     ============================================================= -->
	<target name="createSourceForgeFiles" depends="compileTemplateBuilder, createZipFile, createUpdateSite" description="Step 3">
		
		<antcall target="cleanTempAndPDE" />
		<antcall target="refreshProjects" />
		
		<echo>+------------------------------------------------------</echo>
		<echo>|  Finished RPGUnit build ${build.version}             </echo>
		<echo>|                                                      </echo>
		<echo>|  Create local update site:                           </echo>
		<echo>|  ${build.upload.dir.files}/${version.file}           </echo>
		<echo>|                                                      </echo>
		<echo>+------------------------------------------------------</echo>
		
	</target>
	
	<!-- =============================================================
	      Erzeugt die ZIP Datei.
	     ============================================================= -->
	<target name="createZipFile" depends="prepareZipFile">
		
		<echo>Erzeuge zip Datei: ${version.file}</echo>
		
		<mkdir dir="${build.upload.dir.files}" />
		
	  	<zip destfile="${build.upload.dir.files}/${version.file}">
		    <fileset dir="${temp.dir.local_updatesite}"/>
		</zip>		
		
	</target>
	
	<!-- =============================================================
	      Erzeugt die Update Site.
	     ============================================================= -->
	<target name="createUpdateSite" depends="prepareUpdateSite">
		
		<echo>Erzeuge Update Site Datei: ${version.file}</echo>
		
		<mkdir dir="${build.upload.dir.files.eclipse}" />
		
		<copy todir="${build.upload.dir.files.eclipse}/features" >
			<fileset dir="${temp.dir.local_updatesite}/features"/>
		</copy>
		
		<copy todir="${build.upload.dir.files.eclipse}/plugins" >
			<fileset dir="${temp.dir.local_updatesite}/plugins"/>
		</copy>
		
		<copy todir="${build.upload.dir.files.eclipse}" >
			<fileset dir="${temp.dir.local_updatesite}" includes="artifacts.jar"/>
			<fileset dir="${temp.dir.local_updatesite}" includes="content.jar"/>
			<fileset dir="${temp.dir.local_updatesite}" includes="Readme.txt"/>
		</copy>
		
		<copy todir="${build.upload.dir.files.eclipse}/TemplateBuilder" >
			<fileset dir="${temp.dir.local_updatesite}/TemplateBuilder"/>
		</copy>
		
	</target>
	
	<!-- =============================================================
	      Bereitet das Erstellen der ZIP Datei vor.
	     ============================================================= -->
	<target name="prepareZipFile" depends="retrieveVersionInfo">
		
		<mkdir dir="${temp.dir.local_updatesite}" />
		<mkdir dir="${temp.dir.local_updatesite}/features" />
		<mkdir dir="${temp.dir.local_updatesite}/plugins" />
		<mkdir dir="${temp.dir.local_updatesite}/TemplateBuilder" />
		<mkdir dir="${temp.dir.local_updatesite}/Examples" />
		
		<copy todir="${temp.dir.local_updatesite}/features" >
			<fileset dir="${project.dir}/features" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}/plugins" >
			<fileset dir="${project.dir}/plugins" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}" >
			<fileset dir="${project.dir}" includes="artifacts.jar" />
			<fileset dir="${project.dir}" includes="content.jar" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}/TemplateBuilder" >
			<fileset dir="${templatebuilder.bin.release}" excludes="TemplateBuilder.pdb" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}/Examples" >
			<fileset dir="${examples.root}" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}" >
			<fileset dir="${workspace.home}/com.freemarker.lpex" includes="Readme.txt" />
		</copy>

	</target>
	
	<!-- =============================================================
	      Bereitet das Erstellen der Update-Site Datei vor.
	     ============================================================= -->
	<target name="prepareUpdateSite" depends="retrieveVersionInfo">
		
	</target>
	
	<!-- =============================================================
	      Kopiert die Versions-Informationen.
	     ============================================================= -->
	<target name="retrieveVersionInfo" depends="">
		
		<property name="version.file" value="${local.zipfile}"/>
		
		<echo>Ermittelter Dateiname ist: ${version.file}</echo>
	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien.
	     ============================================================= -->
	<target name="clean" depends="cleanTempAndPDE, cleanTemplateBuilder" description="Cleans the update site">
		
		<mkdir dir="${build.upload.dir}" />
		
		<!-- 'upload' folder -->
		<delete includeemptydirs="true">
			<fileset dir="${build.upload.dir}" excludes=".gitignore" includes="**/*"/>
		</delete>
		
	</target>

	<!-- =============================================================
	      Cleans the Visual Studio build directories.
	     ============================================================= -->
	<target name="cleanTemplateBuilder" depends="" description="Cleans the Visual Studio build directories">
		
		
		<!-- Template Builder -->		
		<delete includeemptydirs="true" dir="${templatebuilder.root}\TemplateBuilder\obj" failonerror="true"/>
		<delete includeemptydirs="true" dir="${templatebuilder.bin.release}" failonerror="true"/>
		<delete includeemptydirs="true" dir="${templatebuilder.bin.debug}" failonerror="true"/>
		<delete includeemptydirs="true" dir="${templatebuilder.obj}" failonerror="true"/>
		
		<antcall target="refreshProjects" />
		
	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien.
	     ============================================================= -->
	<target name="cleanTempAndPDE" depends="" description="Cleans temp and PDE folders">
		
		<mkdir dir="${temp.dir.root}" />
		
		<!-- 'temp' folder -->
		<delete includeemptydirs="true">
			<fileset dir="${temp.dir.root}" includes="**/*"/>
		</delete>

		<!-- Files created by PDE Tools -->
		<delete failonerror="true" >
			<fileset dir="${site.features}" />
			<fileset dir="${site.plugins}" />
		</delete>
		
		<delete failonerror="true" >
			<fileset dir="${site.root}" includes="artifacts.jar" />
			<fileset dir="${site.root}" includes="content.jar" />
		</delete>
		
		<antcall target="refreshProjects" />
		
	</target>
	
	<!-- =============================================================
	      Compiles TemplateBuilder.exe.
	      Requires property "net.msbuild.path" pointing to an
	      existing path to "MSBuild.exe".
	      Check: build.properties
	     ============================================================= -->
	<target name="compileTemplateBuilder" depends="cleanTemplateBuilder, updateVersionNumber">
		
		<exec executable="${net.msbuild.path}" >
			<arg value="${templatebuilder.root}\TemplateBuilder.sln" />
			<arg value="/p:Configuration=Release" />
			<arg value="/target:Clean;Build" />
		</exec>
		
		<delete includeemptydirs="true" dir="${templatebuilder.obj}" failonerror="true"/>
		
		<antcall target="refreshProjects" />
		
	</target>

	<!--
    * =====================================================================
    *   Updates the version numbers of the following files:
    *     - MANIFEST.MF
    *     - feature.xml
    *     - site.xml
    *     - AssemblyInfo.cs (.NET TemplateBuilder project)
    * ===================================================================== -->
	<target name="updateVersionNumber" depends="validateVersionNumber">

		<echo>Updating version number to: ${build.version} ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>

				<if>
					<available file="${workspace.home}\@{project}" type="dir"/>
					<then>

						<echo message="${workspace.home}\@{project}" />

						<if>
							<available file="${workspace.home}\@{project}/META-INF" />
							<then>
								<replaceregexp match="${manifest.version.regex}" replace="${manifest.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/META-INF" includes="MANIFEST.MF" />
								</replaceregexp>
							</then>
						</if>
		
						<replaceregexp match="${feature.1.version.regex}" replace="${feature.1.version.replace}" flags="s" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
						</replaceregexp>
		
						<replaceregexp match="${feature.2.version.regex}" replace="${feature.2.version.replace}" flags="s" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
						</replaceregexp>
		
						<replaceregexp match="${site.1.version.regex}" replace="${site.1.version.replace}" flags="g" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
						</replaceregexp>
		
						<replaceregexp match="${site.2.version.regex}" replace="${site.2.version.replace}" flags="g" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
						</replaceregexp>
						
						<replaceregexp match="${net.version.regex}" replace="${net.version.replace}" flags="g" byline="false">
							<fileset dir="${templatebuilder.properties}" includes="AssemblyInfo.cs" />
						</replaceregexp>

						<eclipse.refreshLocal resource="@{project}" depth="infinite" />
					</then>
				</if>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Validates the version number to ensure, that it matches
    *   the required format.
    * ===================================================================== -->
	<target name="validateVersionNumber">

		<echo>Validating version number to: ${build.version} ...</echo>

		<propertyregex property="validated.version" input="${build.version}" regexp="${validate.version.regex}" select="\1" casesensitive="true" />

		<if>
			<equals arg1="${build.version}" arg2="${validated.version}" />
			<then>
				<echo>Version number validated: OK</echo>
			</then>
			<else>
				<echo>+------------------------------------------------------+</echo>
				<echo>| Version number does not match expected pattern!      |</echo>
				<echo>|                                                      |</echo>
				<echo>| Pattern:                                             |</echo>
				<echo>| major.minor.micro.qualifier                          |</echo>
				<echo>|                                                      |</echo>
				<echo>| major - major version number (requested)             |</echo>
				<echo>| minor - minor version number (recommended)           |</echo>
				<echo>| micro - micro version number (optional)              |</echo>
				<echo>|                                                      |</echo>
				<echo>| The possible qualifiers are:                         |</echo>
				<echo>| r     - release version                              |</echo>
				<echo>| bnnn  - beta version, where nnn between 001 and 999  |</echo>
				<echo>+------------------------------------------------------+</echo>
				<fail>*** ERROR: Invalid version number. ***</fail>
			</else>
		</if>

	</target>

	<!--
    * =====================================================================
    *   Refreshs the projects listed in 'build.properties'.
    * ===================================================================== -->
	<target name="refreshProjects">

		<echo>Refereshing projects ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>
				<eclipse.refreshLocal resource="@{project}" depth="infinite" />
				<echo>* @{project}</echo>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

</project>